{
  "instances": {
    "SingleLayer": {
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo",
      "type": "long_class_specifier",
      "annotation": [
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Icon",
              "modification": {
                "class_modification": [
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "coordinateSystem": {
                          "extent": [
                            {
                              "x": -100,
                              "y": -100
                            },
                            {
                              "x": 100,
                              "y": 100
                            }
                          ],
                          "preserveAspectRatio": "false"
                        }
                      }
                    }
                  },
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "graphics": [
                          {
                            "name": "Text",
                            "attribute": {
                              "extent": [
                                {
                                  "x": -100,
                                  "y": -80
                                },
                                {
                                  "x": 6,
                                  "y": -98
                                }
                              ],
                              "textString": "\"%material.x\"",
                              "textColor": {
                                "r": 0,
                                "g": 0,
                                "b": 255
                              }
                            }
                          },
                          {
                            "name": "Text",
                            "attribute": {
                              "extent": [
                                {
                                  "x": 8,
                                  "y": -74
                                },
                                {
                                  "x": 86,
                                  "y": -104
                                }
                              ],
                              "textString": "\"%nSta\"",
                              "textColor": {
                                "r": 0,
                                "g": 0,
                                "b": 255
                              }
                            }
                          },
                          {
                            "name": "Rectangle",
                            "attribute": {
                              "extent": [
                                {
                                  "x": -60,
                                  "y": 80
                                },
                                {
                                  "x": 60,
                                  "y": -80
                                }
                              ],
                              "lineColor": {
                                "r": 175,
                                "g": 175,
                                "b": 175
                              },
                              "fillColor": {
                                "r": 215,
                                "g": 215,
                                "b": 215
                              },
                              "fillPattern": "FillPattern.Solid"
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": -92,
                                  "y": 0
                                },
                                {
                                  "x": 90,
                                  "y": 0
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None"
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": 8,
                                  "y": -40
                                },
                                {
                                  "x": -6,
                                  "y": -40
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None"
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": 14,
                                  "y": -32
                                },
                                {
                                  "x": -12,
                                  "y": -32
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None"
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": 0,
                                  "y": 0
                                },
                                {
                                  "x": 0,
                                  "y": -32
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None"
                            }
                          },
                          {
                            "name": "Rectangle",
                            "attribute": {
                              "extent": [
                                {
                                  "x": -40,
                                  "y": 6
                                },
                                {
                                  "x": -20,
                                  "y": -6
                                }
                              ],
                              "lineColor": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "fillColor": {
                                "r": 255,
                                "g": 255,
                                "b": 255
                              },
                              "fillPattern": "FillPattern.Solid",
                              "lineThickness": 0.5
                            }
                          },
                          {
                            "name": "Rectangle",
                            "attribute": {
                              "extent": [
                                {
                                  "x": 20,
                                  "y": 6
                                },
                                {
                                  "x": 40,
                                  "y": -6
                                }
                              ],
                              "lineColor": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "fillColor": {
                                "r": 255,
                                "g": 255,
                                "b": 255
                              },
                              "fillPattern": "FillPattern.Solid",
                              "lineThickness": 0.5
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": 66,
                                  "y": -40
                                },
                                {
                                  "x": 52,
                                  "y": -40
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None",
                              "visible": "stateAtSurface_b"
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": 72,
                                  "y": -32
                                },
                                {
                                  "x": 46,
                                  "y": -32
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None",
                              "visible": "stateAtSurface_b"
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": 59,
                                  "y": 0
                                },
                                {
                                  "x": 59,
                                  "y": -32
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None",
                              "visible": "stateAtSurface_b"
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": -59,
                                  "y": 0
                                },
                                {
                                  "x": -59,
                                  "y": -32
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None",
                              "visible": "stateAtSurface_a"
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": -46,
                                  "y": -32
                                },
                                {
                                  "x": -72,
                                  "y": -32
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None",
                              "visible": "stateAtSurface_a"
                            }
                          },
                          {
                            "name": "Line",
                            "attribute": {
                              "points": [
                                {
                                  "x": -52,
                                  "y": -40
                                },
                                {
                                  "x": -66,
                                  "y": -40
                                }
                              ],
                              "color": {
                                "r": 0,
                                "g": 0,
                                "b": 0
                              },
                              "thickness": 0.5,
                              "smooth": "Smooth.None",
                              "visible": "stateAtSurface_a"
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "defaultComponentName",
              "modification": {
                "equal": true,
                "expression": {
                  "simple_expression": "\"lay\""
                }
              }
            }
          }
        },
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Documentation",
              "modification": {
                "class_modification": [
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "info",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "\"<html>\n<p>\nThis is a model of a heat conductor for a single layer of homogeneous material\nthat computes transient or steady-state heat conduction.\n</p>\n<h4>Main equations</h4>\n<h5>Transient heat conduction in materials without phase change</h5>\n<p>\nIf the material is a record that extends\n<a href=\\\"modelica://Buildings.HeatTransfer.Data.Solids\\\">\nBuildings.HeatTransfer.Data.Solids</a> and its\nspecific heat capacity (as defined by the record <code>material.c</code>)\nis non-zero, then this model computes <i>transient</i> heat conduction, i.e., it\ncomputes a numerical approximation to the solution of the heat equation\n</p>\n<p align=\\\"center\\\" style=\\\"font-style:italic;\\\">\n   &rho; c (&part; T(s,t) &frasl; &part;t) =\n    k (&part;&sup2; T(s,t) &frasl; &part;s&sup2;),\n</p>\n<p>\nwhere\n<i>&rho;</i>\nis the mass density,\n<i>c</i>\nis the specific heat capacity per unit mass,\n<i>T</i>\nis the temperature at location <i>s</i> and time <i>t</i> and\n<i>k</i> is the heat conductivity.\nAt the locations <i>s=0</i> and <i>s=x</i>, where <i>x</i> is the\nmaterial thickness, the temperature and heat flow rate is equal to the\ntemperature and heat flow rate of the heat ports.\n</p>\n<h5>Transient heat conduction in phase change materials</h5>\n<p>\nIf the material is declared using a record of type\n<a href=\\\"modelica://Buildings.HeatTransfer.Data.SolidsPCM\\\">\nBuildings.HeatTransfer.Data.SolidsPCM</a>, the heat transfer\nin a phase change material is computed.\nThe record <a href=\\\"modelica://Buildings.HeatTransfer.Data.SolidsPCM\\\">\nBuildings.HeatTransfer.Data.SolidsPCM</a>\ndeclares the solidus temperature <code>TSol</code>,\nthe liquidus temperature <code>TLiq</code> and the latent heat of\nphase transformation <code>LHea</code>.\nFor heat transfer with phase change, the specific internal energy <i>u</i>\nis the dependent variable, rather than the temperature.\nTherefore, the governing equation is\n</p>\n<p align=\\\"center\\\" style=\\\"font-style:italic;\\\">\n   &rho; (&part; u(s,t) &frasl; &part;t) =\n    k (&part;&sup2; T(s,t) &frasl; &part;s&sup2;).\n</p>\n<p>\nThe constitutive\nrelation between specific internal energy <i>u</i> and temperature <i>T</i> is defined in\n<a href=\\\"modelica://Buildings.HeatTransfer.Conduction.BaseClasses.temperature_u\\\">\nBuildings.HeatTransfer.Conduction.BaseClasses.temperature_u</a> by using\ncubic hermite spline interpolation with linear extrapolation.\n</p>\n<h5>Steady-state heat conduction</h5>\n<p>\nIf <code>material.c=0</code>, or if the material extends\n<a href=\\\"modelica://Buildings.HeatTransfer.Data.Resistances\\\">\nBuildings.HeatTransfer.Data.Resistances</a>,\nthen steady-state heat conduction is computed. In this situation, the heat\nflow between its heat ports is\n</p>\n<p align=\\\"center\\\" style=\\\"font-style:italic;\\\">\n   Q = A &nbsp; k &frasl; x &nbsp; (T<sub>a</sub>-T<sub>b</sub>),\n</p>\n<p>\nwhere\n<i>A</i> is the cross sectional area,\n<i>x</i> is the layer thickness,\n<i>T<sub>a</sub></i> is the temperature at port a and\n<i>T<sub>b</sub></i> is the temperature at port b.\n</p>\n<h5>Spatial discretization</h5>\n<p>\nTo spatially discretize the heat equation, the construction is\ndivided into compartments (control volumes) with <code>material.nSta &ge; 1</code> state variables.\nEach control volume has the same material properties.\nThe state variables are connected to each other through thermal resistances.\nIf <code>stateAtSurface_a = true</code>, a state is placed\nat the surface a, and similarly, if\n<code>stateAtSurface_b = true</code>, a state is placed\nat the surface b.\nOtherwise, these states are placed inside the material, away\nfrom the surface.\nThus, to obtain\nthe surface temperature, use <code>port_a.T</code> (or <code>port_b.T</code>)\nand not the variable <code>T[1]</code>.\n</p>\n\nAs an example, we assume a material with a length of <code>x</code>\nand a discretization with four state variables.\n<ul>\n<li>\nIf <code>stateAtSurface_a = false</code> and <code>stateAtSurface_b = false</code>,\nthen each of the four state variables is placed in the middle of a control volume with length <code>l=x/material.nSta</code>.\n<p align=\\\"left\\\"><img alt=\\\"image\\\" src=\\\"modelica://Buildings/Resources/Images/HeatTransfer/Conduction/noStateAtSurface.svg\\\"/>\n</li>\n<li>\nIf <code>stateAtSurface_a = true</code> or <code>stateAtSurface_b = true</code>,\nthen one state is placed on the surface of the material. Each of the remaining three states\nis placed in the middle of a control volume with length <code>l=x/(material.nSta-1)</code>.\n<p align=\\\"left\\\"><img alt=\\\"image\\\" src=\\\"modelica://Buildings/Resources/Images/HeatTransfer/Conduction/oneStateAtSurface.svg\\\"/>\n</li>\n<li>\nIf <code>stateAtSurface_a = true</code> and <code>stateAtSurface_b = true</code>,\nthen two states are placed on the surfaces of the material. Each of the remaining two states is placed\nin the middle of a control volume with length <code>l=x/(material.nSta-2)</code>.\n<p align=\\\"left\\\"><img alt=\\\"image\\\" src=\\\"modelica://Buildings/Resources/Images/HeatTransfer/Conduction/twoStatesAtSurface.svg\\\"/>\n</li>\n</ul>\n\n<p>\nTo build multi-layer constructions,\nuse\n<a href=\\\"modelica://Buildings.HeatTransfer.Conduction.MultiLayer\\\">\nBuildings.HeatTransfer.Conduction.MultiLayer</a> instead of this model.\n</p>\n<h4>Important parameters</h4>\n<p>\nThe parameters <code>stateAtSurface_a</code> and\n<code>stateAtSurface_b</code>\ndetermine whether there is a state variable at these surfaces,\nas described above.\nNote that if <code>stateAtSurface_a = true</code>,\nthen there is temperature state on the surface a with prescribed\nvalue, as determined by the differential equation of the heat conduction.\nHence, in this situation, it is not possible to\nconnect a temperature boundary condition such as\n<a href=\\\"modelica://Buildings.HeatTransfer.Sources.FixedTemperature\\\">\nBuildings.HeatTransfer.Sources.FixedTemperature</a> as this would\nyield to specifying the same temperature twice.\nTo avoid this, either set <code>stateAtSurface_a = false</code>,\nor place a thermal resistance\nbetween the boundary condition and the surface of this model.\nThe same applies for surface b.\nSee the examples in\n<a href=\\\"modelica://Buildings.HeatTransfer.Examples\\\">\nBuildings.HeatTransfer.Examples</a>.\n</p>\n</html>\""
                          }
                        }
                      }
                    }
                  },
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "revisions",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "\"<html>\n<ul>\n<li>\nAugust 27, 2019, by Michael Wetter:<br/>\nRemoved assertion on geometry.<br/>\nThis is for\n<a href=\\\"https://github.com/lbl-srg/modelica-buildings/issues/1529\\\">issue 1529</a>.\n</li>\n<li>\nNovember 22, 2016, by Thierry S. Nouidui:<br/>\nFix bug in mass balance.\n</li>\n<li>\nNovember 17, 2016, by Thierry S. Nouidui:<br/>\nAdded parameter <code>nSta2</code> to avoid translation error\nin Dymola 2107. This is a work-around for a bug in Dymola\nwhich will be addressed in future releases.\n</li>\n<li>\nNovember 11, 2016, by Thierry S. Nouidui:<br/>\nRevised the implementation for adding a state at the surface.\n</li>\n<li>\nOctober 29, 2016, by Michael Wetter:<br/>\nAdded option to place a state at the surface.<br/>\nThis is for\n<a href=\\\"https://github.com/lbl-srg/modelica-buildings/issues/565\\\">issue 565</a>.\n</li>\n<li>\nMarch 1, 2016, by Michael Wetter:<br/>\nRemoved test for equality of <code>Real</code> variables.\nThis is for\n<a href=\\\"https://github.com/lbl-srg/modelica-buildings/issues/493\\\">issue 493</a>.\n</li>\n<li>\nMay 21, 2015, by Michael Wetter:<br/>\nReformulated function to reduce use of the division macro\nin Dymola.\nThis is for <a href=\\\"https://github.com/lbl-srg/modelica-buildings/issues/417\\\">issue 417</a>.\n</li>\n<li>\nOctober 17, 2014, by Michael Wetter:<br/>\nChanged the input argument for the function\n<code>Buildings.HeatTransfer.Conduction.BaseClasses.der_temperature_u</code>\nfrom type\n<code>Buildings.HeatTransfer.Data.BaseClasses.Material</code>\nto the elements of this type as OpenModelica fails to translate the\nmodel if the input to this function is a record.\n</li>\n<li>\nMay 30, 2014, by Michael Wetter:<br/>\nRemoved undesirable annotation <code>Evaluate=true</code>.\n</li>\n<li>\nJanuary 22, 2013, by Armin Teskeredzic:<br/>\nImplementation of phase-change materials based on enthalpy-linearisation method.\nPhase-change properties defined in <code>material</code> record and relationship\nbetween enthalpy and temperature defined in the <code>EnthalpyTemperature</code> function.\n</li>\n<li>\nMarch 9, 2012, by Michael Wetter:<br/>\nRemoved protected variable <code>der_T</code> as it is not required.\n</li>\n<li>\nMarch 6 2010, by Michael Wetter:<br/>\nChanged implementation to allow steady-state and transient heat conduction\ndepending on the specific heat capacity of the material. This allows using the\nsame model in composite constructions in which some layers are\ncomputed steady-state and other transient.\n</li><li>\nFebruary 5 2009, by Michael Wetter:<br/>\nFirst implementation.\n</li>\n</ul>\n</html>\""
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ],
      "semantics": {},
      "cdl_annotations": {}
    },
    "T": {
      "type_specifier": "Modelica.Units.SI.Temperature",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "T",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "nSta"
              }
            }
          ],
          "modification": {
            "class_modification": [
              {
                "element_modification_or_replaceable": {
                  "element_modification": {
                    "name": "start",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "if_expression": {
                          "if_elseif": [
                            {
                              "condition": {
                                "simple_expression": "stateAtSurface_a"
                              },
                              "then": {
                                "simple_expression": {
                                  "function_call": {
                                    "name": "cat",
                                    "arguments": [
                                      {
                                        "name": "1"
                                      },
                                      {
                                        "name": "{T_a_start},{(T_a_start +(T_b_start -T_a_start)*UA*sum(RNod[k] for k in 1:i -1)) for i in 2:nSta}"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ],
                          "else_expression": {
                            "simple_expression": {
                              "for_loop": {
                                "expression": {
                                  "simple_expression": "(T_a_start +(T_b_start -T_a_start)*UA*sum(RNod[k] for k in 1:i))"
                                },
                                "for_loop": [
                                  {
                                    "name": "i",
                                    "range": "1:nSta"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "element_modification_or_replaceable": {
                  "each": true,
                  "element_modification": {
                    "name": "nominal",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "300"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "description": {
          "description_string": "Temperature at the states"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "Q_flow": {
      "type_specifier": "Modelica.Units.SI.HeatFlowRate",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "Q_flow",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "nSta +1"
              }
            }
          ],
          "modification": {
            "class_modification": [
              {
                "element_modification_or_replaceable": {
                  "each": true,
                  "element_modification": {
                    "name": "start",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "0"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "description": {
          "description_string": "Heat flow rates to each state"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "u": {
      "type_specifier": "Modelica.Units.SI.SpecificInternalEnergy",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "u",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "nSta"
              }
            }
          ],
          "modification": {
            "class_modification": [
              {
                "element_modification_or_replaceable": {
                  "each": true,
                  "element_modification": {
                    "name": "start",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "270000"
                      }
                    }
                  }
                }
              },
              {
                "element_modification_or_replaceable": {
                  "each": true,
                  "element_modification": {
                    "name": "nominal",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "270000"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "description": {
          "description_string": "Definition of specific internal energy"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "stateAtSurface_a": {
      "type_prefix": "parameter",
      "type_specifier": "Boolean",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "stateAtSurface_a",
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": "true"
            }
          }
        },
        "description": {
          "description_string": "=true, a state will be at the surface a",
          "annotation": [
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Dialog",
                  "modification": {
                    "class_modification": [
                      {
                        "element_modification_or_replaceable": {
                          "element_modification": {
                            "name": "tab",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": "\"Dynamics\""
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Evaluate",
                  "modification": {
                    "equal": true,
                    "expression": {
                      "simple_expression": "true"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "annotation": [
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Dialog",
              "modification": {
                "class_modification": [
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "tab",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "\"Dynamics\""
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Evaluate",
              "modification": {
                "equal": true,
                "expression": {
                  "simple_expression": "true"
                }
              }
            }
          }
        }
      ],
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "stateAtSurface_b": {
      "type_prefix": "parameter",
      "type_specifier": "Boolean",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "stateAtSurface_b",
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": "true"
            }
          }
        },
        "description": {
          "description_string": "=true, a state will be at the surface b",
          "annotation": [
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Dialog",
                  "modification": {
                    "class_modification": [
                      {
                        "element_modification_or_replaceable": {
                          "element_modification": {
                            "name": "tab",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": "\"Dynamics\""
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Evaluate",
                  "modification": {
                    "equal": true,
                    "expression": {
                      "simple_expression": "true"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "annotation": [
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Dialog",
              "modification": {
                "class_modification": [
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "tab",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "\"Dynamics\""
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Evaluate",
              "modification": {
                "equal": true,
                "expression": {
                  "simple_expression": "true"
                }
              }
            }
          }
        }
      ],
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "material": {
      "type_prefix": "parameter",
      "type_specifier": "Data.BaseClasses.Material",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "material"
        },
        "description": {
          "description_string": "Material from Data.Solids, Data.SolidsPCM or Data.Resistances",
          "annotation": [
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "choicesAllMatching",
                  "modification": {
                    "equal": true,
                    "expression": {
                      "simple_expression": "true"
                    }
                  }
                }
              }
            },
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "Placement": {
                    "transformation": {
                      "extent": [
                        {
                          "x": 60,
                          "y": 60
                        },
                        {
                          "x": 80,
                          "y": 80
                        }
                      ]
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "annotation": [
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "choicesAllMatching",
              "modification": {
                "equal": true,
                "expression": {
                  "simple_expression": "true"
                }
              }
            }
          }
        },
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "Placement": {
                "transformation": {
                  "extent": [
                    {
                      "x": 60,
                      "y": 60
                    },
                    {
                      "x": 80,
                      "y": 80
                    }
                  ]
                }
              }
            }
          }
        }
      ],
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "steadyStateInitial": {
      "type_prefix": "parameter",
      "type_specifier": "Boolean",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "steadyStateInitial",
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": "false"
            }
          }
        },
        "description": {
          "description_string": "=true initializes dT(0)/dt=0, false initializes T(0) at fixed temperature using T_a_start and T_b_start",
          "annotation": [
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Dialog",
                  "modification": {
                    "class_modification": [
                      {
                        "element_modification_or_replaceable": {
                          "element_modification": {
                            "name": "group",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": "\"Initialization\""
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Evaluate",
                  "modification": {
                    "equal": true,
                    "expression": {
                      "simple_expression": "true"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "annotation": [
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Dialog",
              "modification": {
                "class_modification": [
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "group",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "\"Initialization\""
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Evaluate",
              "modification": {
                "equal": true,
                "expression": {
                  "simple_expression": "true"
                }
              }
            }
          }
        }
      ],
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "T_a_start": {
      "type_prefix": "parameter",
      "type_specifier": "Modelica.Units.SI.Temperature",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "T_a_start",
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": "293.15"
            }
          }
        },
        "description": {
          "description_string": "Initial temperature at port_a, used if steadyStateInitial = false",
          "annotation": [
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Dialog",
                  "modification": {
                    "class_modification": [
                      {
                        "element_modification_or_replaceable": {
                          "element_modification": {
                            "name": "group",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": "\"Initialization\""
                              }
                            }
                          }
                        }
                      },
                      {
                        "element_modification_or_replaceable": {
                          "element_modification": {
                            "name": "enable",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": "not steadyStateInitial"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          ]
        }
      },
      "annotation": [
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Dialog",
              "modification": {
                "class_modification": [
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "group",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "\"Initialization\""
                          }
                        }
                      }
                    }
                  },
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "enable",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "not steadyStateInitial"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ],
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "T_b_start": {
      "type_prefix": "parameter",
      "type_specifier": "Modelica.Units.SI.Temperature",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "T_b_start",
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": "293.15"
            }
          }
        },
        "description": {
          "description_string": "Initial temperature at port_b, used if steadyStateInitial = false",
          "annotation": [
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Dialog",
                  "modification": {
                    "class_modification": [
                      {
                        "element_modification_or_replaceable": {
                          "element_modification": {
                            "name": "group",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": "\"Initialization\""
                              }
                            }
                          }
                        }
                      },
                      {
                        "element_modification_or_replaceable": {
                          "element_modification": {
                            "name": "enable",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": "not steadyStateInitial"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          ]
        }
      },
      "annotation": [
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Dialog",
              "modification": {
                "class_modification": [
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "group",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "\"Initialization\""
                          }
                        }
                      }
                    }
                  },
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "enable",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "not steadyStateInitial"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ],
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "nSta2": {
      "type_prefix": "parameter",
      "type_specifier": "Integer",
      "type": "element",
      "compositionSpecifier": "public",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "nSta2",
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": "material.nSta"
            }
          }
        },
        "description": {
          "description_string": "Number of states in a material (do not overwrite, used to work around Dymola 2017 bug)",
          "annotation": [
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Evaluate",
                  "modification": {
                    "equal": true,
                    "expression": {
                      "simple_expression": "true"
                    }
                  }
                }
              }
            },
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "HideResult",
                  "modification": {
                    "equal": true,
                    "expression": {
                      "simple_expression": "true"
                    }
                  }
                }
              }
            },
            {
              "element_modification_or_replaceable": {
                "element_modification": {
                  "name": "Dialog",
                  "modification": {
                    "class_modification": [
                      {
                        "element_modification_or_replaceable": {
                          "element_modification": {
                            "name": "enable",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": "false"
                              }
                            }
                          }
                        }
                      },
                      {
                        "element_modification_or_replaceable": {
                          "element_modification": {
                            "name": "tab",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": "\"Advanced\""
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          ]
        }
      },
      "annotation": [
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Evaluate",
              "modification": {
                "equal": true,
                "expression": {
                  "simple_expression": "true"
                }
              }
            }
          }
        },
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "HideResult",
              "modification": {
                "equal": true,
                "expression": {
                  "simple_expression": "true"
                }
              }
            }
          }
        },
        {
          "element_modification_or_replaceable": {
            "element_modification": {
              "name": "Dialog",
              "modification": {
                "class_modification": [
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "enable",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "false"
                          }
                        }
                      }
                    }
                  },
                  {
                    "element_modification_or_replaceable": {
                      "element_modification": {
                        "name": "tab",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "\"Advanced\""
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ],
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "nSta": {
      "type_prefix": "parameter",
      "type_specifier": "Integer",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "nSta",
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": {
                "function_call": {
                  "name": "max",
                  "arguments": [
                    {
                      "name": "nSta2"
                    },
                    {
                      "name": "if stateAtSurface_a or stateAtSurface_b then 2 else 1"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": {
          "description_string": "Number of state variables"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "nR": {
      "type_prefix": "parameter",
      "type_specifier": "Integer",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "nR",
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": "nSta +1"
            }
          }
        },
        "description": {
          "description_string": "Number of thermal resistances"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "RNod": {
      "type_prefix": "parameter",
      "type_specifier": "Modelica.Units.SI.ThermalResistance",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "RNod",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "nR"
              }
            }
          ],
          "modification": {
            "equal": true,
            "expression": {
              "if_expression": {
                "if_elseif": [
                  {
                    "condition": {
                      "simple_expression": "(stateAtSurface_a and stateAtSurface_b)"
                    },
                    "then": {
                      "if_expression": {
                        "if_elseif": [
                          {
                            "condition": {
                              "simple_expression": "([object Object])"
                            },
                            "then": {
                              "simple_expression": {
                                "for_loop": {
                                  "expression": {
                                    "simple_expression": {
                                      "if_expression": [
                                        {
                                          "if_elseif": [
                                            {
                                              "condition": {
                                                "logical_expression": {
                                                  "logical_or": [
                                                    {
                                                      "logical_and": [
                                                        {
                                                          "arithmetic_expressions": [
                                                            {
                                                              "name": "i"
                                                            },
                                                            {
                                                              "name": "1"
                                                            }
                                                          ],
                                                          "relation_operator": "=="
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "logical_and": [
                                                        {
                                                          "arithmetic_expressions": [
                                                            {
                                                              "name": "i"
                                                            },
                                                            {
                                                              "name": "nR"
                                                            }
                                                          ],
                                                          "relation_operator": "=="
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              },
                                              "then": "0"
                                            }
                                          ],
                                          "else": "R/(nSta -1)"
                                        }
                                      ]
                                    }
                                  },
                                  "for_loop": [
                                    {
                                      "name": "i",
                                      "range": "1:nR"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ],
                        "else_expression": {
                          "simple_expression": {
                            "for_loop": {
                              "expression": {
                                "simple_expression": {
                                  "if_expression": [
                                    {
                                      "if_elseif": [
                                        {
                                          "condition": {
                                            "logical_expression": {
                                              "logical_or": [
                                                {
                                                  "logical_and": [
                                                    {
                                                      "arithmetic_expressions": [
                                                        {
                                                          "name": "i"
                                                        },
                                                        {
                                                          "name": "1"
                                                        }
                                                      ],
                                                      "relation_operator": "=="
                                                    }
                                                  ]
                                                },
                                                {
                                                  "logical_and": [
                                                    {
                                                      "arithmetic_expressions": [
                                                        {
                                                          "name": "i"
                                                        },
                                                        {
                                                          "name": "nR"
                                                        }
                                                      ],
                                                      "relation_operator": "=="
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          },
                                          "then": "0"
                                        },
                                        {
                                          "condition": {
                                            "logical_expression": {
                                              "logical_or": [
                                                {
                                                  "logical_and": [
                                                    {
                                                      "arithmetic_expressions": [
                                                        {
                                                          "name": "i"
                                                        },
                                                        {
                                                          "name": "2"
                                                        }
                                                      ],
                                                      "relation_operator": "=="
                                                    }
                                                  ]
                                                },
                                                {
                                                  "logical_and": [
                                                    {
                                                      "arithmetic_expressions": [
                                                        {
                                                          "name": "i"
                                                        },
                                                        {
                                                          "name": "nR -1"
                                                        }
                                                      ],
                                                      "relation_operator": "=="
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          },
                                          "then": "R/(2*(nSta -2))"
                                        }
                                      ],
                                      "else": "R/(nSta -2)"
                                    }
                                  ]
                                }
                              },
                              "for_loop": [
                                {
                                  "name": "i",
                                  "range": "1:nR"
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "condition": {
                      "simple_expression": "(stateAtSurface_a and (not stateAtSurface_b))"
                    },
                    "then": {
                      "simple_expression": {
                        "for_loop": {
                          "expression": {
                            "simple_expression": {
                              "if_expression": [
                                {
                                  "if_elseif": [
                                    {
                                      "condition": {
                                        "logical_expression": {
                                          "logical_or": [
                                            {
                                              "logical_and": [
                                                {
                                                  "arithmetic_expressions": [
                                                    {
                                                      "name": "i"
                                                    },
                                                    {
                                                      "name": "1"
                                                    }
                                                  ],
                                                  "relation_operator": "=="
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "then": "0"
                                    },
                                    {
                                      "condition": {
                                        "logical_expression": {
                                          "logical_or": [
                                            {
                                              "logical_and": [
                                                {
                                                  "arithmetic_expressions": [
                                                    {
                                                      "name": "i"
                                                    },
                                                    {
                                                      "name": "2"
                                                    }
                                                  ],
                                                  "relation_operator": "=="
                                                }
                                              ]
                                            },
                                            {
                                              "logical_and": [
                                                {
                                                  "arithmetic_expressions": [
                                                    {
                                                      "name": "i"
                                                    },
                                                    {
                                                      "name": "nR"
                                                    }
                                                  ],
                                                  "relation_operator": "=="
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "then": "R/(2*(nSta -1))"
                                    }
                                  ],
                                  "else": "R/(nSta -1)"
                                }
                              ]
                            }
                          },
                          "for_loop": [
                            {
                              "name": "i",
                              "range": "1:nR"
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "condition": {
                      "simple_expression": "(stateAtSurface_b and (not stateAtSurface_a))"
                    },
                    "then": {
                      "simple_expression": {
                        "for_loop": {
                          "expression": {
                            "simple_expression": {
                              "if_expression": [
                                {
                                  "if_elseif": [
                                    {
                                      "condition": {
                                        "logical_expression": {
                                          "logical_or": [
                                            {
                                              "logical_and": [
                                                {
                                                  "arithmetic_expressions": [
                                                    {
                                                      "name": "i"
                                                    },
                                                    {
                                                      "name": "nR"
                                                    }
                                                  ],
                                                  "relation_operator": "=="
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "then": "0"
                                    },
                                    {
                                      "condition": {
                                        "logical_expression": {
                                          "logical_or": [
                                            {
                                              "logical_and": [
                                                {
                                                  "arithmetic_expressions": [
                                                    {
                                                      "name": "i"
                                                    },
                                                    {
                                                      "name": "1"
                                                    }
                                                  ],
                                                  "relation_operator": "=="
                                                }
                                              ]
                                            },
                                            {
                                              "logical_and": [
                                                {
                                                  "arithmetic_expressions": [
                                                    {
                                                      "name": "i"
                                                    },
                                                    {
                                                      "name": "nR -1"
                                                    }
                                                  ],
                                                  "relation_operator": "=="
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      },
                                      "then": "R/(2*(nSta -1))"
                                    }
                                  ],
                                  "else": "R/(nSta -1)"
                                }
                              ]
                            }
                          },
                          "for_loop": [
                            {
                              "name": "i",
                              "range": "1:nR"
                            }
                          ]
                        }
                      }
                    }
                  }
                ],
                "else_expression": {
                  "simple_expression": {
                    "for_loop": {
                      "expression": {
                        "simple_expression": "R/(if [object Object] then (2*nSta) else nSta)"
                      },
                      "for_loop": [
                        {
                          "name": "i",
                          "range": "1:nR"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": {
          "description_string": "Thermal resistance"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "m": {
      "type_prefix": "parameter",
      "type_specifier": "Modelica.Units.SI.Mass",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "m",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "nSta"
              }
            }
          ],
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": "(A*material.x*material.d)*(if (stateAtSurface_a and stateAtSurface_b) then if ([object Object]) then [object Object] elseif ([object Object]) then [object Object] else [object Object] elseif (stateAtSurface_a and (not stateAtSurface_b)) then [object Object] elseif (stateAtSurface_b and (not stateAtSurface_a)) then [object Object] else [object Object])"
            }
          }
        },
        "description": {
          "description_string": "Mass associated with the temperature state"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "mInv": {
      "type_prefix": "parameter",
      "type_specifier": "Real",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "mInv",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "nSta"
              }
            }
          ],
          "modification": {
            "equal": true,
            "expression": {
              "if_expression": {
                "if_elseif": [
                  {
                    "condition": {
                      "simple_expression": "material.steadyState"
                    },
                    "then": {
                      "simple_expression": {
                        "function_call": {
                          "name": "zeros",
                          "arguments": [
                            {
                              "name": "nSta"
                            }
                          ]
                        }
                      }
                    }
                  }
                ],
                "else_expression": {
                  "simple_expression": {
                    "for_loop": {
                      "expression": {
                        "simple_expression": "1/m[i]"
                      },
                      "for_loop": [
                        {
                          "name": "i",
                          "range": "1:nSta"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": {
          "description_string": "Inverse of the mass associated with the temperature state"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "C": {
      "type_prefix": "parameter",
      "type_specifier": "Modelica.Units.SI.HeatCapacity",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "C",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "nSta"
              }
            }
          ],
          "modification": {
            "equal": true,
            "expression": {
              "simple_expression": "m*material.c"
            }
          }
        },
        "description": {
          "description_string": "Heat capacity associated with the temperature state"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "CInv": {
      "type_prefix": "parameter",
      "type_specifier": "Real",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "CInv",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "nSta"
              }
            }
          ],
          "modification": {
            "equal": true,
            "expression": {
              "if_expression": {
                "if_elseif": [
                  {
                    "condition": {
                      "simple_expression": "material.steadyState"
                    },
                    "then": {
                      "simple_expression": {
                        "function_call": {
                          "name": "zeros",
                          "arguments": [
                            {
                              "name": "nSta"
                            }
                          ]
                        }
                      }
                    }
                  }
                ],
                "else_expression": {
                  "simple_expression": {
                    "for_loop": {
                      "expression": {
                        "simple_expression": "1/C[i]"
                      },
                      "for_loop": [
                        {
                          "name": "i",
                          "range": "1:nSta"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": {
          "description_string": "Inverse of heat capacity associated with the temperature state"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "ud": {
      "type_prefix": "parameter",
      "type_specifier": "Modelica.Units.SI.SpecificInternalEnergy",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "ud",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "Buildings.HeatTransfer.Conduction.nSupPCM"
              }
            }
          ],
          "modification": {
            "class_modification": [
              {
                "element_modification_or_replaceable": {
                  "each": true,
                  "element_modification": {
                    "name": "fixed",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "false"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "description": {
          "description_string": "Support points for derivatives (used for PCM)"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "Td": {
      "type_prefix": "parameter",
      "type_specifier": "Modelica.Units.SI.Temperature",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "Td",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "Buildings.HeatTransfer.Conduction.nSupPCM"
              }
            }
          ],
          "modification": {
            "class_modification": [
              {
                "element_modification_or_replaceable": {
                  "each": true,
                  "element_modification": {
                    "name": "fixed",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "false"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "description": {
          "description_string": "Support points for derivatives (used for PCM)"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    },
    "dT_du": {
      "type_prefix": "parameter",
      "type_specifier": "Real",
      "type": "element",
      "compositionSpecifier": "protected",
      "long_class_specifier_identifier": "SingleLayer",
      "single_component_list": {
        "declaration": {
          "identifier": "dT_du",
          "array_subscripts": [
            {
              "expression": {
                "simple_expression": "Buildings.HeatTransfer.Conduction.nSupPCM"
              }
            }
          ],
          "modification": {
            "class_modification": [
              {
                "element_modification_or_replaceable": {
                  "each": true,
                  "element_modification": {
                    "name": "fixed",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "false"
                      }
                    }
                  }
                }
              },
              {
                "element_modification_or_replaceable": {
                  "each": true,
                  "element_modification": {
                    "name": "unit",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "\"kg.K2/J\""
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "description": {
          "description_string": "Derivatives dT/du at the support points (used for PCM)"
        }
      },
      "annotation": null,
      "semantics": {},
      "cdl_annotations": {},
      "within": "Buildings.HeatTransfer.Conduction",
      "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/HeatTransfer/Conduction/SingleLayer.mo"
    }
  },
  "requiredReferences": {
    "extends_clause": [
      {
        "name": "Buildings.HeatTransfer.Conduction.BaseClasses.PartialConductor",
        "class_modification": [
          {
            "element_modification_or_replaceable": {
              "final": true,
              "element_modification": {
                "name": "R",
                "modification": {
                  "equal": true,
                  "expression": {
                    "if_expression": {
                      "if_elseif": [
                        {
                          "condition": {
                            "simple_expression": "([object Object])"
                          },
                          "then": {
                            "simple_expression": "material.x/material.k/A"
                          }
                        }
                      ],
                      "else_expression": {
                        "simple_expression": "material.R/A"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "long_class_specifier_identifier": "SingleLayer",
        "within": "Buildings.HeatTransfer.Conduction",
        "compositionSpecifier": "public"
      }
    ],
    "connections": {}
  }
}