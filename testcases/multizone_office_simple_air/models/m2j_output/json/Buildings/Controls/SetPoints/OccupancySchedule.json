{
  "within": "Buildings.Controls.SetPoints",
  "class_definition": [
    {
      "class_prefixes": "block",
      "class_specifier": {
        "long_class_specifier": {
          "identifier": "OccupancySchedule",
          "description_string": "Occupancy schedule with look-ahead",
          "composition": {
            "element_list": [
              {
                "extends_clause": {
                  "name": "Modelica.Blocks.Icons.Block"
                }
              },
              {
                "component_clause": {
                  "type_prefix": "parameter",
                  "type_specifier": "Real",
                  "component_list": [
                    {
                      "declaration": {
                        "identifier": "occupancy",
                        "array_subscripts": [
                          {
                            "colon_op": true
                          }
                        ],
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "3600*{7,19}"
                          }
                        }
                      },
                      "description": {
                        "description_string": "Occupancy table, each entry switching occupancy on or off"
                      }
                    }
                  ]
                }
              },
              {
                "component_clause": {
                  "type_prefix": "parameter",
                  "type_specifier": "Boolean",
                  "component_list": [
                    {
                      "declaration": {
                        "identifier": "firstEntryOccupied",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "true"
                          }
                        }
                      },
                      "description": {
                        "description_string": "Set to true if first entry in occupancy denotes a changed from unoccupied to occupied"
                      }
                    }
                  ]
                }
              },
              {
                "component_clause": {
                  "type_prefix": "parameter",
                  "type_specifier": "Modelica.Units.SI.Time",
                  "component_list": [
                    {
                      "declaration": {
                        "identifier": "period",
                        "modification": {
                          "equal": true,
                          "expression": {
                            "simple_expression": "86400"
                          }
                        }
                      },
                      "description": {
                        "description_string": "End time of periodicity"
                      }
                    }
                  ]
                }
              },
              {
                "component_clause": {
                  "type_specifier": "Modelica.Blocks.Interfaces.RealOutput",
                  "component_list": [
                    {
                      "declaration": {
                        "identifier": "tNexNonOcc"
                      },
                      "description": {
                        "description_string": "Time until next non-occupancy",
                        "annotation": [
                          {
                            "element_modification_or_replaceable": {
                              "element_modification": {
                                "Placement": {
                                  "transformation": {
                                    "extent": [
                                      {
                                        "x": 100,
                                        "y": -10
                                      },
                                      {
                                        "x": 120,
                                        "y": 10
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "component_clause": {
                  "type_specifier": "Modelica.Blocks.Interfaces.RealOutput",
                  "component_list": [
                    {
                      "declaration": {
                        "identifier": "tNexOcc"
                      },
                      "description": {
                        "description_string": "Time until next occupancy",
                        "annotation": [
                          {
                            "element_modification_or_replaceable": {
                              "element_modification": {
                                "Placement": {
                                  "transformation": {
                                    "extent": [
                                      {
                                        "x": 100,
                                        "y": 50
                                      },
                                      {
                                        "x": 120,
                                        "y": 70
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "component_clause": {
                  "type_specifier": "Modelica.Blocks.Interfaces.BooleanOutput",
                  "component_list": [
                    {
                      "declaration": {
                        "identifier": "occupied"
                      },
                      "description": {
                        "description_string": "Outputs true if occupied at current time",
                        "annotation": [
                          {
                            "element_modification_or_replaceable": {
                              "element_modification": {
                                "Placement": {
                                  "transformation": {
                                    "extent": [
                                      {
                                        "x": 100,
                                        "y": -70
                                      },
                                      {
                                        "x": 120,
                                        "y": -50
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "element_sections": [
              {
                "protected_element_list": [
                  {
                    "final": true,
                    "component_clause": {
                      "type_prefix": "parameter",
                      "type_specifier": "Integer",
                      "component_list": [
                        {
                          "declaration": {
                            "identifier": "nRow",
                            "modification": {
                              "equal": true,
                              "expression": {
                                "simple_expression": {
                                  "function_call": {
                                    "name": "size",
                                    "arguments": [
                                      {
                                        "name": "occupancy"
                                      },
                                      {
                                        "name": "1"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "description": {
                            "description_string": "Number of rows in the schedule"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "component_clause": {
                      "type_prefix": "discrete",
                      "type_specifier": "Modelica.Units.SI.Time",
                      "component_list": [
                        {
                          "declaration": {
                            "identifier": "tOcc"
                          },
                          "description": {
                            "description_string": "Time when next occupancy starts"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "component_clause": {
                      "type_prefix": "discrete",
                      "type_specifier": "Modelica.Units.SI.Time",
                      "component_list": [
                        {
                          "declaration": {
                            "identifier": "tNonOcc"
                          },
                          "description": {
                            "description_string": "Time when next non-occupancy starts"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "component_clause": {
                      "type_prefix": "discrete",
                      "type_specifier": "Modelica.Units.SI.Time",
                      "component_list": [
                        {
                          "declaration": {
                            "identifier": "tNext"
                          },
                          "description": {
                            "description_string": "Time of next switch in schedule"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "class_definition": {
                      "class_prefixes": "function",
                      "class_specifier": {
                        "long_class_specifier": {
                          "identifier": "getOutput",
                          "description_string": "Get the next occupancy or non-occupancy outputs",
                          "composition": {
                            "element_list": [
                              {
                                "extends_clause": {
                                  "name": "Modelica.Icons.Function"
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "input",
                                  "type_specifier": "Modelica.Units.SI.Time",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "t"
                                      },
                                      "description": {
                                        "description_string": "Current model time"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "input",
                                  "type_specifier": "Modelica.Units.SI.Time",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "period"
                                      },
                                      "description": {
                                        "description_string": "Periodicity"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "input",
                                  "type_specifier": "Real",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "occupancy",
                                        "array_subscripts": [
                                          {
                                            "expression": {
                                              "simple_expression": "nRow"
                                            }
                                          }
                                        ]
                                      },
                                      "description": {
                                        "description_string": "Occupancy table, each entry switching occupancy on or off"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "input",
                                  "type_specifier": "Boolean",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "firstEntryOccupied"
                                      },
                                      "description": {
                                        "description_string": "Set to true if first entry in occupancy denotes a changed from unoccupied to occupied"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "input",
                                  "type_specifier": "Integer",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "nRow"
                                      },
                                      "description": {
                                        "description_string": "Number of rows in the schedule"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "output",
                                  "type_specifier": "Modelica.Units.SI.Time",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "tOcc"
                                      },
                                      "description": {
                                        "description_string": "Time when next occupancy starts"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "output",
                                  "type_specifier": "Modelica.Units.SI.Time",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "tNonOcc"
                                      },
                                      "description": {
                                        "description_string": "Time when next non-occupancy starts"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "output",
                                  "type_specifier": "Boolean",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "occupied"
                                      },
                                      "description": {
                                        "description_string": "Outputs true if occupied at current time"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "output",
                                  "type_specifier": "Modelica.Units.SI.Time",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "tNext"
                                      },
                                      "description": {
                                        "description_string": "Time of next switch in schedule"
                                      }
                                    }
                                  ]
                                }
                              }
                            ],
                            "element_sections": [
                              {
                                "protected_element_list": [
                                  {
                                    "component_clause": {
                                      "type_specifier": "Integer",
                                      "component_list": [
                                        {
                                          "declaration": {
                                            "identifier": "iPerSta"
                                          },
                                          "description": {
                                            "description_string": "Counter for the period in which the next occupancy starts"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "component_clause": {
                                      "type_specifier": "Integer",
                                      "component_list": [
                                        {
                                          "declaration": {
                                            "identifier": "iPerSto"
                                          },
                                          "description": {
                                            "description_string": "Counter for the period in which the next occupancy stops"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "component_clause": {
                                      "type_specifier": "Integer",
                                      "component_list": [
                                        {
                                          "declaration": {
                                            "identifier": "nexStaInd"
                                          },
                                          "description": {
                                            "description_string": "Next index when occupancy starts"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "component_clause": {
                                      "type_specifier": "Integer",
                                      "component_list": [
                                        {
                                          "declaration": {
                                            "identifier": "nexStoInd"
                                          },
                                          "description": {
                                            "description_string": "Next index when occupancy stops"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              {
                                "algorithm_section": {
                                  "statement": [
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "iPerSta"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": {
                                            "function_call": {
                                              "name": "integer",
                                              "arguments": [
                                                {
                                                  "name": "t/period"
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "iPerSto"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": "iPerSta"
                                        }
                                      }
                                    },
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "nexStaInd"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": "1"
                                        }
                                      }
                                    },
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "nexStoInd"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": "2"
                                        }
                                      }
                                    },
                                    {
                                      "for_statement": {
                                        "for_indices": [
                                          {
                                            "identifier": "i",
                                            "expression": {
                                              "simple_expression": "1:2:nRow -1"
                                            }
                                          }
                                        ],
                                        "loop_statements": [
                                          {
                                            "if_statement": {
                                              "if_elseif": [
                                                {
                                                  "condition": {
                                                    "simple_expression": {
                                                      "logical_expression": {
                                                        "logical_or": [
                                                          {
                                                            "logical_and": [
                                                              {
                                                                "arithmetic_expressions": [
                                                                  {
                                                                    "name": "t"
                                                                  },
                                                                  {
                                                                    "name": "occupancy[i] +iPerSta*period"
                                                                  }
                                                                ],
                                                                "relation_operator": ">="
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "then": [
                                                    {
                                                      "assignment_statement": {
                                                        "identifier": [
                                                          {
                                                            "dot_op": false,
                                                            "identifier": "nexStaInd"
                                                          }
                                                        ],
                                                        "value": {
                                                          "simple_expression": "i +2"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "for_statement": {
                                        "for_indices": [
                                          {
                                            "identifier": "i",
                                            "expression": {
                                              "simple_expression": "2:2:nRow"
                                            }
                                          }
                                        ],
                                        "loop_statements": [
                                          {
                                            "if_statement": {
                                              "if_elseif": [
                                                {
                                                  "condition": {
                                                    "simple_expression": {
                                                      "logical_expression": {
                                                        "logical_or": [
                                                          {
                                                            "logical_and": [
                                                              {
                                                                "arithmetic_expressions": [
                                                                  {
                                                                    "name": "t"
                                                                  },
                                                                  {
                                                                    "name": "occupancy[i] +iPerSto*period"
                                                                  }
                                                                ],
                                                                "relation_operator": ">="
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "then": [
                                                    {
                                                      "assignment_statement": {
                                                        "identifier": [
                                                          {
                                                            "dot_op": false,
                                                            "identifier": "nexStoInd"
                                                          }
                                                        ],
                                                        "value": {
                                                          "simple_expression": "i +2"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "if_statement": {
                                        "if_elseif": [
                                          {
                                            "condition": {
                                              "simple_expression": {
                                                "logical_expression": {
                                                  "logical_or": [
                                                    {
                                                      "logical_and": [
                                                        {
                                                          "arithmetic_expressions": [
                                                            {
                                                              "name": "nexStaInd"
                                                            },
                                                            {
                                                              "name": "nRow"
                                                            }
                                                          ],
                                                          "relation_operator": ">"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            "then": [
                                              {
                                                "assignment_statement": {
                                                  "identifier": [
                                                    {
                                                      "dot_op": false,
                                                      "identifier": "nexStaInd"
                                                    }
                                                  ],
                                                  "value": {
                                                    "simple_expression": "1"
                                                  }
                                                }
                                              },
                                              {
                                                "assignment_statement": {
                                                  "identifier": [
                                                    {
                                                      "dot_op": false,
                                                      "identifier": "iPerSta"
                                                    }
                                                  ],
                                                  "value": {
                                                    "simple_expression": "iPerSta +1"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "if_statement": {
                                        "if_elseif": [
                                          {
                                            "condition": {
                                              "simple_expression": {
                                                "logical_expression": {
                                                  "logical_or": [
                                                    {
                                                      "logical_and": [
                                                        {
                                                          "arithmetic_expressions": [
                                                            {
                                                              "name": "nexStoInd"
                                                            },
                                                            {
                                                              "name": "nRow"
                                                            }
                                                          ],
                                                          "relation_operator": ">"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            "then": [
                                              {
                                                "assignment_statement": {
                                                  "identifier": [
                                                    {
                                                      "dot_op": false,
                                                      "identifier": "nexStoInd"
                                                    }
                                                  ],
                                                  "value": {
                                                    "simple_expression": "2"
                                                  }
                                                }
                                              },
                                              {
                                                "assignment_statement": {
                                                  "identifier": [
                                                    {
                                                      "dot_op": false,
                                                      "identifier": "iPerSto"
                                                    }
                                                  ],
                                                  "value": {
                                                    "simple_expression": "iPerSto +1"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "tOcc"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": "occupancy[nexStaInd] +iPerSta*period"
                                        }
                                      }
                                    },
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "tNonOcc"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": "occupancy[nexStoInd] +iPerSto*period"
                                        }
                                      }
                                    },
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "occupied"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": {
                                            "logical_expression": {
                                              "logical_or": [
                                                {
                                                  "logical_and": [
                                                    {
                                                      "arithmetic_expressions": [
                                                        {
                                                          "name": "tNonOcc"
                                                        },
                                                        {
                                                          "name": "tOcc"
                                                        }
                                                      ],
                                                      "relation_operator": "<"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "if_statement": {
                                        "if_elseif": [
                                          {
                                            "condition": {
                                              "simple_expression": "not firstEntryOccupied"
                                            },
                                            "then": [
                                              {},
                                              {},
                                              {},
                                              {
                                                "assignment_statement": {
                                                  "identifier": [
                                                    {
                                                      "dot_op": false,
                                                      "identifier": "occupied"
                                                    }
                                                  ],
                                                  "value": {
                                                    "simple_expression": "not occupied"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "tNext"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": {
                                            "function_call": {
                                              "name": "min",
                                              "arguments": [
                                                {
                                                  "name": "tOcc"
                                                },
                                                {
                                                  "name": "tNonOcc"
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  {
                    "class_definition": {
                      "encapsulated": true,
                      "class_prefixes": "function",
                      "class_specifier": {
                        "long_class_specifier": {
                          "identifier": "switchInteger",
                          "description_string": "Switch two Integer arguments",
                          "composition": {
                            "element_list": [
                              {
                                "import_clause": {
                                  "identifier": "",
                                  "name": "Modelica"
                                }
                              },
                              {
                                "extends_clause": {
                                  "name": "Modelica.Icons.Function"
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "input",
                                  "type_specifier": "Integer",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "x1"
                                      },
                                      "description": {
                                        "description_string": "First argument"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "input",
                                  "type_specifier": "Integer",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "x2"
                                      },
                                      "description": {
                                        "description_string": "Second argument"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "output",
                                  "type_specifier": "Integer",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "y1"
                                      },
                                      "description": {
                                        "description_string": "Output = x2"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "output",
                                  "type_specifier": "Integer",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "y2"
                                      },
                                      "description": {
                                        "description_string": "Output = x1"
                                      }
                                    }
                                  ]
                                }
                              }
                            ],
                            "element_sections": [
                              {
                                "algorithm_section": {
                                  "statement": [
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "y1"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": "x2"
                                        }
                                      }
                                    },
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "y2"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": "x1"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  },
                  {
                    "class_definition": {
                      "encapsulated": true,
                      "class_prefixes": "function",
                      "class_specifier": {
                        "long_class_specifier": {
                          "identifier": "switchReal",
                          "description_string": "Switch two Real arguments",
                          "composition": {
                            "element_list": [
                              {
                                "import_clause": {
                                  "identifier": "",
                                  "name": "Modelica"
                                }
                              },
                              {
                                "extends_clause": {
                                  "name": "Modelica.Icons.Function"
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "input",
                                  "type_specifier": "Real",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "x1"
                                      },
                                      "description": {
                                        "description_string": "First argument"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "input",
                                  "type_specifier": "Real",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "x2"
                                      },
                                      "description": {
                                        "description_string": "Second argument"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "output",
                                  "type_specifier": "Real",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "y1"
                                      },
                                      "description": {
                                        "description_string": "Output = x2"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "component_clause": {
                                  "type_prefix": "output",
                                  "type_specifier": "Real",
                                  "component_list": [
                                    {
                                      "declaration": {
                                        "identifier": "y2"
                                      },
                                      "description": {
                                        "description_string": "Output = x1"
                                      }
                                    }
                                  ]
                                }
                              }
                            ],
                            "element_sections": [
                              {
                                "algorithm_section": {
                                  "statement": [
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "y1"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": "x2"
                                        }
                                      }
                                    },
                                    {
                                      "assignment_statement": {
                                        "identifier": [
                                          {
                                            "dot_op": false,
                                            "identifier": "y2"
                                          }
                                        ],
                                        "value": {
                                          "simple_expression": "x1"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                ]
              },
              {
                "equation_section": {
                  "initial": true,
                  "equation": [
                    {
                      "function_call_equation": {
                        "function_name": "assert",
                        "function_call_args": {
                          "function_argument": {
                            "expression": {
                              "simple_expression": {
                                "logical_expression": {
                                  "logical_or": [
                                    {
                                      "logical_and": [
                                        {
                                          "arithmetic_expressions": [
                                            {
                                              "name": "mod(nRow,2)"
                                            },
                                            {
                                              "name": "0.1"
                                            }
                                          ],
                                          "relation_operator": "<"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "function_arguments": {
                            "function_argument": {
                              "expression": {
                                "simple_expression": "\"The parameter \\\"occupancy\\\" must have an even number of elements.\\n\""
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "function_call_equation": {
                        "function_name": "assert",
                        "function_call_args": {
                          "function_argument": {
                            "expression": {
                              "simple_expression": {
                                "logical_expression": {
                                  "logical_or": [
                                    {
                                      "logical_and": [
                                        {
                                          "arithmetic_expressions": [
                                            {
                                              "name": "0"
                                            },
                                            {
                                              "name": "occupancy[1]"
                                            }
                                          ],
                                          "relation_operator": "<="
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "function_arguments": {
                            "function_argument": {
                              "expression": {
                                "simple_expression": "\"The first element of \\\"occupancy\\\" must be bigger than or equal to zero.\" +\"\\n   Received occupancy[1] = \" +String(occupancy[1])"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "function_call_equation": {
                        "function_name": "assert",
                        "function_call_args": {
                          "function_argument": {
                            "expression": {
                              "simple_expression": {
                                "logical_expression": {
                                  "logical_or": [
                                    {
                                      "logical_and": [
                                        {
                                          "arithmetic_expressions": [
                                            {
                                              "name": "period"
                                            },
                                            {
                                              "name": "occupancy[nRow]"
                                            }
                                          ],
                                          "relation_operator": ">="
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "function_arguments": {
                            "function_argument": {
                              "expression": {
                                "simple_expression": "\"The parameter \\\"period\\\" must be greater than or equal to the last element of \\\"occupancy\\\".\" +\"\\n   Received period      = \" +String(period) +\"\\n            occupancy[\" +String(nRow) +\"] = \" +String(occupancy[nRow])"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "for_equation": {
                        "for_indices": [
                          {
                            "identifier": "i",
                            "expression": {
                              "simple_expression": "1:nRow -1"
                            }
                          }
                        ],
                        "loop_equations": [
                          {
                            "function_call_equation": {
                              "function_name": "assert",
                              "function_call_args": {
                                "function_argument": {
                                  "expression": {
                                    "simple_expression": {
                                      "logical_expression": {
                                        "logical_or": [
                                          {
                                            "logical_and": [
                                              {
                                                "arithmetic_expressions": [
                                                  {
                                                    "name": "occupancy[i]"
                                                  },
                                                  {
                                                    "name": "occupancy[i +1]"
                                                  }
                                                ],
                                                "relation_operator": "<"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "function_arguments": {
                                  "function_argument": {
                                    "expression": {
                                      "simple_expression": "\"The elements of the parameter \\\"occupancy\\\" must be strictly increasing.\""
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "assignment_equation": {
                        "lhs": "(tOcc,tNonOcc,occupied,tNext)",
                        "rhs": {
                          "simple_expression": {
                            "function_call": {
                              "name": "getOutput",
                              "arguments": [
                                {
                                  "name": "t=time,period=period,occupancy=occupancy,firstEntryOccupied=firstEntryOccupied,nRow=nRow"
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "equation_section": {
                  "equation": [
                    {
                      "when_equation": [
                        {
                          "condition": {
                            "simple_expression": {
                              "logical_expression": {
                                "logical_or": [
                                  {
                                    "logical_and": [
                                      {
                                        "arithmetic_expressions": [
                                          {
                                            "name": "time"
                                          },
                                          {
                                            "name": "pre(tNext)"
                                          }
                                        ],
                                        "relation_operator": ">="
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "then": [
                            {
                              "assignment_equation": {
                                "lhs": "(tOcc,tNonOcc,occupied,tNext)",
                                "rhs": {
                                  "simple_expression": {
                                    "function_call": {
                                      "name": "getOutput",
                                      "arguments": [
                                        {
                                          "name": "t=time,period=period,occupancy=occupancy,firstEntryOccupied=firstEntryOccupied,nRow=nRow"
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "assignment_equation": {
                        "lhs": "tNexOcc",
                        "rhs": {
                          "simple_expression": "tOcc -time"
                        }
                      }
                    },
                    {
                      "assignment_equation": {
                        "lhs": "tNexNonOcc",
                        "rhs": {
                          "simple_expression": "tNonOcc -time"
                        }
                      }
                    }
                  ]
                }
              }
            ],
            "annotation": [
              {
                "element_modification_or_replaceable": {
                  "element_modification": {
                    "name": "Icon",
                    "modification": {
                      "class_modification": [
                        {
                          "element_modification_or_replaceable": {
                            "element_modification": {
                              "graphics": [
                                {
                                  "name": "Line",
                                  "attribute": {
                                    "points": [
                                      {
                                        "x": -62,
                                        "y": -68
                                      },
                                      {
                                        "x": -38,
                                        "y": -20
                                      },
                                      {
                                        "x": -14,
                                        "y": -70
                                      }
                                    ],
                                    "color": {
                                      "r": 0,
                                      "g": 0,
                                      "b": 255
                                    }
                                  }
                                },
                                {
                                  "name": "Line",
                                  "attribute": {
                                    "points": [
                                      {
                                        "x": -38,
                                        "y": -20
                                      },
                                      {
                                        "x": -38,
                                        "y": 44
                                      }
                                    ],
                                    "color": {
                                      "r": 0,
                                      "g": 0,
                                      "b": 255
                                    }
                                  }
                                },
                                {
                                  "name": "Ellipse",
                                  "attribute": {
                                    "extent": [
                                      {
                                        "x": -54,
                                        "y": 74
                                      },
                                      {
                                        "x": -22,
                                        "y": 44
                                      }
                                    ],
                                    "lineColor": {
                                      "r": 0,
                                      "g": 0,
                                      "b": 255
                                    }
                                  }
                                },
                                {
                                  "name": "Line",
                                  "attribute": {
                                    "points": [
                                      {
                                        "x": -66,
                                        "y": 22
                                      },
                                      {
                                        "x": -38,
                                        "y": 36
                                      }
                                    ],
                                    "color": {
                                      "r": 0,
                                      "g": 0,
                                      "b": 255
                                    }
                                  }
                                },
                                {
                                  "name": "Line",
                                  "attribute": {
                                    "points": [
                                      {
                                        "x": -38,
                                        "y": 36
                                      },
                                      {
                                        "x": -6,
                                        "y": 20
                                      }
                                    ],
                                    "color": {
                                      "r": 0,
                                      "g": 0,
                                      "b": 255
                                    }
                                  }
                                },
                                {
                                  "name": "Text",
                                  "attribute": {
                                    "extent": [
                                      {
                                        "x": 34,
                                        "y": 74
                                      },
                                      {
                                        "x": 90,
                                        "y": 50
                                      }
                                    ],
                                    "textString": "\"occupancy\"",
                                    "textColor": {
                                      "r": 0,
                                      "g": 0,
                                      "b": 255
                                    }
                                  }
                                },
                                {
                                  "name": "Text",
                                  "attribute": {
                                    "extent": [
                                      {
                                        "x": 32,
                                        "y": 16
                                      },
                                      {
                                        "x": 92,
                                        "y": -16
                                      }
                                    ],
                                    "textString": "\"non-occupancy\"",
                                    "textColor": {
                                      "r": 0,
                                      "g": 0,
                                      "b": 255
                                    }
                                  }
                                },
                                {
                                  "name": "Text",
                                  "attribute": {
                                    "extent": [
                                      {
                                        "x": 34,
                                        "y": -44
                                      },
                                      {
                                        "x": 94,
                                        "y": -76
                                      }
                                    ],
                                    "textString": "\"occupied\"",
                                    "textColor": {
                                      "r": 0,
                                      "g": 0,
                                      "b": 255
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "element_modification_or_replaceable": {
                  "element_modification": {
                    "name": "defaultComponentName",
                    "modification": {
                      "equal": true,
                      "expression": {
                        "simple_expression": "\"occSch\""
                      }
                    }
                  }
                }
              },
              {
                "element_modification_or_replaceable": {
                  "element_modification": {
                    "name": "Documentation",
                    "modification": {
                      "class_modification": [
                        {
                          "element_modification_or_replaceable": {
                            "element_modification": {
                              "name": "info",
                              "modification": {
                                "equal": true,
                                "expression": {
                                  "simple_expression": "\"<html>\n<p>\nThis model outputs whether the building is currently occupied,\nand how long it will take until the next time when the building\nwill be occupied or non-occupied.\nThe latter may be used, for example, to start a ventilation system\nhalf an hour before occupancy starts in order to ventilate the room.\n</p>\n<p>\nThe occupancy is defined by a time schedule of the form\n</p>\n<pre>\n  occupancy = 3600*{7, 12, 14, 19}\n</pre>\n<p>\nThis indicates that the occupancy is from <i>7:00</i> until <i>12:00</i>\nand from <i>14:00</i> to <i>19:00</i>. This will be repeated periodically.\nThe parameter <code>periodicity</code> defines the periodicity.\nThe period always starts at <i>t=0</i> seconds.\n</p>\n</html>\""
                                }
                              }
                            }
                          }
                        },
                        {
                          "element_modification_or_replaceable": {
                            "element_modification": {
                              "name": "revisions",
                              "modification": {
                                "equal": true,
                                "expression": {
                                  "simple_expression": "\"<html>\n<ul>\n<li>\nMarch 25, 2021, by Michael Wetter:<br/>\nIntegrated changes from Buildings for\n<a href=\\\"https://github.com/ibpsa/modelica-ibpsa/issues/1454\\\">IBPSA, #1454</a>.\n</li>\n<li>\nFebruary 26, 2021, by Michael Wetter:<br/>\nRefactored implementation to use a function to compute the next time events.<br/>\nThis is a work-around for\n<a href=\\\"https://github.com/lbl-srg/modelica-buildings/issues/2369\\\">Buildings, issue 2369</a>.\n</li>\n<li>\nOctober 30, 2017, by Michael Wetter:<br/>\nRewrote using <code>equation</code> rather than <code>algorithm</code>\nand removed assertion.<br/>\nThis is for\n<a href=\\\"https://github.com/ibpsa/modelica-ibpsa/issues/844\\\">issue 844</a>.\n</li>\n<li>\nSeptember 11, 2012, by Michael Wetter:<br/>\nAdded <code>pre</code> operator in <code>when</code> clause and relaxed\ntolerance in <code>assert</code> statement.\n</li>\n<li>\nJuly 26, 2012, by Michael Wetter:<br/>\nFixed a bug that caused an error in the schedule if the simulation start time was negative or equal to the first entry in the schedule.\n</li>\n<li>\nFebruary 16, 2012, by Michael Wetter:<br/>\nRemoved parameter <code>startTime</code>. It was removed because <code>startTime=0</code>\nwould imply that the schedule should not start for one day if the simulation were\nto be started at <i>t=-8760</i> seconds.\nFixed bug that prevented schedule to start when the simulation was started at a time that\nis higher than <code>endTime</code>.\nRenamed parameter <code>endTime</code> to <code>period</code>.\n</li>\n<li>\nApril 2, 2009, by Michael Wetter:<br/>\nFirst implementation.\n</li>\n</ul>\n</html>\""
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      }
    }
  ],
  "modelicaFile": "Buildings/Controls/SetPoints/OccupancySchedule.mo",
  "fullMoFilePath": "/Users/akprakash/Programming/modelica/modelica-buildings/Buildings/Controls/SetPoints/OccupancySchedule.mo",
  "checksum": "3415298c986279545d83190415e71c52"
}